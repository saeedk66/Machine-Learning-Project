abline(x,predict(fit))
plot(x,y)
lines(x,predict(fit))
z
rm(list = ls())
mtcars
?mtcars
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
summary(mtcars2)
View(mtcars2)
View(mtcars2)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ disp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
View(mtcars2)
str(mtcars2)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
summary(data)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
summary(data)
fit <- lm(mpg~am, data = data)
summary(fit)
mean(data$am)
aggregate(mpg~am, data, mean)
library(ggplot2)
ggplot(data,aes(x= mpg, y= am)) + geom_boxplot(fill = am)
ggplot(data,aes(x= mpg, y=factor(am)) + geom_boxplot(fill = am)
ggplot(data,aes(x= mpg, y=factor(am)) + geom_boxplot(fill = am))
ggplot(data,aes(x= mpg, y=factor(am)) + geom_boxplot(fill = am))
ggplot(data,aes(x= am,y= mpg) + geom_boxplot(aes(fill = am)))
ggplot(data,aes(x= factor(am),y= mpg) + geom_boxplot(aes(fill = factor(am))))
ggplot(data,aes(x= factor(am),y= mpg) + geom_boxplot())
ggplot(data,aes(x=am,y= mpg)) + geom_boxplot()
ggplot(data,aes(x=am,y= mpg)) + geom_boxplot(aes(fill = am))
t.test(mpg~am, data = data, paired = F, var.equal = F)
fit1 <- lm(mpg~., data = data)
summary(fit1)
class(data$cyl)
stepfit <- step(fit1, direction = "both")
summary(stepfit)
lm(mpg~cyl+hp+wt+am, data = data)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor.scope(carb)
})
summary(data)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
summary(data)
fit1 <- lm(mpg~., data = data)
stepfit <- step(fit1, direction = "both")
lm(mpg~cyl+hp+wt+am, data = data)
fit2 <- lm(mpg~cyl+hp+wt+am, data = data)
summary(fit2)
plot(fit2, which = c(1,3))
plot(fit2, which = 1)
library(car)
vif(fit2)
vif(fit1)
fit3 <- step(fit,direction = "forward")
summary(fit3)
fit3 <- step(fit,direction = "both")
fit3 <- lm(mpg~hp+wt+am, data = data)
summary(fit3)
cov(data)
princomp(data)
fit1 <- lm(mpg~., data = data)
summary(fit1)
stepfit <- step(fit1, direction = "both")
summary(stepfit)
fit2 <- lm(mpg~cyl+hp+wt+am, data = data)
summary(fit2)
vif(fit2)
vif(fit3)
anova(fit,fit1,fit2,fit3)
library(ggplot2);library(plyr);library(dplyr);library(reshape2)
ggplot(data,aes(y=mpg,x=am))+geom_violin(aes(color=am))+geom_boxplot(aes(fill=am),alpha=0.4)+
geom_jitter(position = position_jitter(width = .1,height=0),color="blue")+theme_bw()+
theme(legend.position="none")+scale_y_continuous("MPG")+scale_x_discrete("Transmission")+
ggtitle("MPG by Transmission Type")
data1 <- melt(data,id.var=c("car","am","mpg"))
ggplot(data1,aes(y=mpg,x=value,color=am))+geom_point()+
stat_smooth(formula=y~poly(x,degree=1),se=F,method="lm",linetype=1)+
stat_smooth(formula=y~poly(x,degree=2),se=F,method="lm",linetype=2)+
facet_wrap(~variable,scales="free")+theme_bw()+theme(legend.position="bottom")+
ggtitle("MPG versus Other Variables by Type of Transmission")+scale_y_continuous("MPG")+
scale_x_continuous("Variable Value")+scale_color_discrete("Transmission\nType")
data1 <- melt(data,id.var=c("car","am","mpg"))
data$car <- row.names(data)
data1 <- melt(data,id.var=c("car","am","mpg"))
ggplot(data1,aes(y=mpg,x=value,color=am))+geom_point()+
stat_smooth(formula=y~poly(x,degree=1),se=F,method="lm",linetype=1)+
stat_smooth(formula=y~poly(x,degree=2),se=F,method="lm",linetype=2)+
facet_wrap(~variable,scales="free")+theme_bw()+theme(legend.position="bottom")+
ggtitle("MPG versus Other Variables by Type of Transmission")+scale_y_continuous("MPG")+
scale_x_continuous("Variable Value")+scale_color_discrete("Transmission\nType")
data$car <- row.names(data)
data1 <- melt(data,id.var=c("car","am","mpg"))
View(data)
library(dplyr)
library(reshape2)
data1 <- melt(data,id.var=c("car","am","mpg"))
View(data1)
ggplot(data1,aes(y=mpg,x=value,color=am))+geom_point()+
stat_smooth(formula=y~poly(x,degree=1),se=F,method="lm",linetype=1)+
stat_smooth(formula=y~poly(x,degree=2),se=F,method="lm",linetype=2)+
facet_wrap(~variable,scales="free")+theme_bw()+theme(legend.position="bottom")+
ggtitle("MPG versus Other Variables by Type of Transmission")+scale_y_continuous("MPG")+
scale_x_continuous("Variable Value")+scale_color_discrete("Transmission\nType")
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
library(caret)
#Now some models
install.packages("caret")
library(caret)
model1 <- train(mpg~am,data,method="lm")
ggplot(data,aes(x=am,y=mpg,color=am))+geom_point()+
geom_hline(yintercept=24.392,color=1)+geom_hline(yintercept=17.147,color=2)
ddply(data,.(am),summarise,mean(mpg))
model2 <- train(mpg~.,data[-12],method="lmStepAIC",direction="backward",trace=F)
model3 <- train(mpg~.,data[-12],method="lmStepAIC",direction="forward")
model4 <- train(mpg~.,data[-12],method="lmStepAIC")
fit2 <- lm(mpg~wt + qsec + am,data=data[-12])
fit2 <- summary(model2)
summary(model3)
summary(model4)
diags <- data.frame(car=row.names(mtcars),residuals=fit2$residuals,am=mtcars$am,wt=mtcars$wt,qsec=mtcars$qsec,
fitted=predict(model2,data))
diags1 <- melt(diags,id.vars=c("car","residuals"))
ggplot(diags1,aes(y=residuals,x=value,color=variable))+geom_point()+
facet_wrap(~variable,scales="free_x")+theme_bw()+theme(legend.position="none")+
ggtitle("Diagnostic Plots for Final Model")+scale_x_continuous("Variable")
autoplot.lm(model2)
source('C:/Users/S.kh/Desktop/Coursera/Regression models/pr.R')
rm(list = ls())
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
summary(data)
fit <- lm(mpg~am, data = data)
summary(fit)
mean(data$am)
aggregate(mpg~am, data, mean)
library(ggplot2)
ggplot(data,aes(x=am,y= mpg)) + geom_boxplot(aes(fill = am))
t.test(mpg~am, data = data, paired = F, var.equal = F)
cor(data)
cor(data[,c(1,3,4,5,6,7)])
View(data)
vif(fit1)
fit1 <- lm(mpg~., data = data)
vif(fit1)
stepfit <- step(fit1, direction = "both")
summary(stepfit)
stepfit$anova
par(mfrow = c(2,2))
plot(fit2)
plot(stepfit)
mean(stepfit$residuals)
install.packages("car")
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
summary(data)
biplot(data)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
summary(data)
cor(data[,c(1,3,4,5,6,7)])
fit1 <- lm(mpg~., data = data)
summary(fit1)
vif(fit1)
library(car)
library(car)
vif(fit1)
cor(data[,c(3,4,5,6,7)])
stepfit <- step(fit1, direction = "both")
summary(stepfit)
stepfit$coefficients
confint(stepfit$coefficients[6])
confint(coef(stepfit))
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am))
library(ggplot2)
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am))
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am)) + geom_smooth(method = "lm")
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
summary(data)
cor(data[,c(1,3,4,5,6,7)])
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am)) + geom_smooth(method = "lm")
library(ggplot2)
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am)) + geom_smooth(method = "lm")
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am)) + geom_smooth(method = "lm") + facet_grid(.~am)
ggplot(data,aes(x= hp, y= mpg)) + geom_point(aes(col = am)) + geom_smooth(method = "lm") + facet_grid(am~.)
ggplot(data, aes(x= wt, y mpg)) + geom_point((aes(col = am))) + facet_grid(am~.) + geom_smooth(method = "lm")
ggplot(data, aes(x= wt, y =mpg)) + geom_point((aes(col = am))) + facet_grid(am~.) + geom_smooth(method = "lm")
fit1 <- lm(mpg~., data = data)
summary(fit1)
stepfit <- step(fit1, direction = "both")
summary(stepfit)
fit3 <- lm(mpg~cyl+hp+wt+am + wt:am, data = data)
summary(fit3)
library(car)
library(car)
vif(fit3)
fit4 <- lm(mpg~wt+hp+ am:wt)
fit4 <- lm(mpg~wt+hp+ am:wt, data = data)
summary(fit4)
vif(fit4)
fit5 <- lm(mpg~wt+hp+ qsec, data = data)
summary(fit5)
vif(fit5)
fit6 <- lm(mpg~am, data = data)
step(fit6)
step(fit6, direction = "forward")
fit6 <- lm(mpg~1, data = data)
step(fit6, direction = "forward")
step(fit6)
?kable
influence.measures(lm(mpg~cyl+hp+wt+am, data = data))
View(data)
plot(lm(mpg~cyl+hp+wt+am, data = data))
fit7 <- lm(mpg~cyl+hp+wt+am, data = data)
summary(fit7)
vif(fit7)
fit3 <- lm(mpg~hp+wt+am, data = data)
summary(fit3)
vif(fit3)
influence.measures(fit3)
plot(fit3)
library(caret)
?`caret-internal`
data("faithful")
head(faithful)
set.seed(333)
intrain <- createDataPartition(faithful$waiting, p = .5, list = F)
Trainset <- faithful[intrain,]
testset <- faithful[-intrain,]
head(Trainset)
plot(Trainset$waiting, Trainset$eruptions)
lm1 <- lm(eruption~waiting, data = Trainset)
lm1 <- lm(eruptions~waiting, data = Trainset)
summary(lm1)
rm(list = ls())
install.packages("ISLR")
library(ISLR)
data("Wage")
head(Wage)
View(Wage)
Wage <- subset(Wage, select = -c(logwage))
summary(Wage)
inTrain <- createDataPartition(Wage$wage, p = 0.7, list = F)
trainSet <- Wage[inTrain,]; testSet <- Wage[-inTrain,]
featurePlot(x = trainSet[,c(2,5,7)],y = trainSet$wage, plot = "pairs")
ggplot(trainSet, aes(x= age, y= wage)) + geom_point(aes(fill = jobclass))
ggplot(trainSet, aes(x= age, y= wage)) + geom_point(aes(col = jobclass))
modfit <- train(wage~age+jobclass+ education, method = "lm", data = trainSet)
summary(modfit)
modfit$finalModel
finmod <- modfit$finalModel
print(finmod)
plot(modfit, which = 1)
plot(finmod, which = 1)
plot(finmod)
plot(finmod$residuals)
rm(list = ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
pairs(concrete)
View(trainIndex)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training)
View(training)
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,];
testing = adData[-inTrain,]
il <- grep("^IL",colnames(training), value = T)
preproc <- preProcess(training[,il], method = "pca", thresh = 0.8)
preproc$dim
preproc$rotation
rm(list = ls())
data <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- factor(cyl)
gear <- factor(gear)
carb <- factor(carb)
})
library(caret)
fit <- train(data$mpg~., data = data, method = "lm", preProcess = "pca")
fit <- train(mpg~., data = data, method = "lm", preProcess = "pca")
summary(fit)
predict(fit, data)
View(data)
fit$finalModel
fit$method
fit$modelInfo
fit$results
fit$bestTune
fit$coefnames
fit$maximize
fit$preProcess
plot(fit)
plot(fit$finalModel)
summary(fit$finalModel)
fit1 <- lm(mpg~., data = data)
stepfit <- step(fit1, direction = "both")
summary(stepfit)
cv_model_pcr <- train(
mpg ~ .,
data = data,
method = "pcr",
trControl = trainControl(method = "cv", number = 10),
preProcess = c("zv", "center", "scale"),
tuneLength = 20
)
summary(cv_model_pcr$finalModel)
ggplot(cv_model_pcr)
cv_model_pcr$results
fit2 <- train(
mpg ~ .,
data = data,
method = "pcr",
trControl = trainControl(method = "cv", number = 10))
summary(fit2$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
test <- segmentationOriginal["Test",]
View(test)
test <- segmentationOriginal[c("Test"),]
View(segmentationOriginal)
test <- segmentationOriginal[segmentationOriginal$Case=="Test",]
train <- segmentationOriginal[segmentationOriginal$Case== "Train",]
set.seed(125)
fit <-
fit <- train(train$Class~., method = "rpart")
library(caret)
fit <- train(train$Class~., method = "rpart")
fit <- train(train$Class~.,data = train, method = "rpart")
install.packages("raprt")
install.packages("rpart")
install.packages("rpart")
fit <- train(train$Class~.,data = train, method = "rpart")
library(caret)
fit <- train(train$Class~.,data = train, method = "rpart")
rm(list = ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
fit <- train(Class~., data = training, method = "rpart")
install.packages("e1071")
fit <- train(Class~., data = training, method = "rpart")
plot(fit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(fit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
fit1 <- train(Area~.,data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(fit1, newdata)
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
fit2 <- train(chd~age+alcohol+ obesity+ tabacco+ typea+ldl, data = trainSA, method = "glm", family = "binomial")
View(trainSA)
fit2 <- train(chd~age+alcohol+ obesity+ tobacco+ typea+ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, prediction = predict(fit2, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
vowel.train
missClass(trainSA$chd, prediction = predict(fit2, trainSA))
missClass(testSA$chd, prediction = predict(fit2, testSA))
setwd("C:/Users/S.kh/Desktop/Coursera/Practical machine learning")
training <- read.csv("./pml-training.csv")
testing <- read.csv("./pml-testing.csv")
colMeans(is.na(testing))
View(testing)
colMeans(is.na(training))
training <- training[,is.na(training) <= .75]
training <- training[,colmean(is.na(training)) <= .75]
training <- training[,colmeans(is.na(training)) <= .75]
training <- training[,colMeans(is.na(training)) <= .75]
colMeans(is.na(training))
View(training)
training <- read.csv("./pml-training.csv", na.strings = c("","#DIV/0!","N"))
training <- training[,colMeans(is.na(training)) <= .75]
training <- read.csv("./pml-training.csv", na.strings = c("","#DIV/0!","NA"))
training <- training[,colMeans(is.na(training)) <= .75]
View(training)
training <- training[,colMeans(is.na(training)) <= .75]
